.# read target from stdin to %3
mov %3, 0
|v|             |<|  
mov %1, %0      
gt  %4, %1, 47  sub %3, %3, 48
lt  %5, %1, 58  add %3, %3, %1
and %4, %5, %4  mul %3, %3, 10
TNL %4          |^|  
.
.# if value is less than 4, it is prime
lt  %4, %3, 4
TNL %4          |v|  
.
.# init queue with first two primes and a guard value (0)
mov %2, 2       JMP 59
mov %2, 3
mov %2, 0
.
mov %1, 4
.
.# outer for loop on %1
|>|             |v|
.               mov %5, 0 # reset flag
.
.               # loop through primes in queue to see if we are divisible
.               |>|             |v|
.               .               # read next from queue and immediately insert again
.               .               mov %4, %2
.               .               mov %2, %4
.               .               # hijacking %5
.               .               mul %5, %4, %4
.               .               gt  %5, %5, %1
.               .               TNL %5          |v|
.               .               # if guard, we are prime
.               .               eq  %5, %4, 0
.               .               TNL %5          .               |v|
.               .               # hijacking %4 
.               JMP 10          rem %4, %1, %4  .               JMP 7
.               |^|             TNR %4
.               # end of prime loop
.               .               |v|             |<|  
.               # loop through remaining queue items
.               |>|             |v|  
.               mov %2, %4      mov %4, %2
.               |^|             TNR %4
.               # end of queue loop,
.               # re-add zero and maybe new prime
.               .               |v|             .               |<|  
.               .               TNL %5          |v|       
.               .               .               mov %2, %1          
.               .               .               mov %6, %1
.               .               .               CAL 15
.               .               .               mov %0, 10
.               |v|             |<|             |<|
.               mov %2, 0
.               # skip to target-1 if %1 > sqrt(%3)
.               mul %4, %1, %1
.               gt  %4, %4, %3
.               TNL %4          |v|  
.               .               eq  %4, %1, %3
.               |v|             TNR %4
.               .               mov %1, %3
.               .               sub %1, %1, 1
JMP 40          |v|             |<|  
add %1, %1, 1   lt  %4, %1, %3
|^|             TNR %4
|v|             |<|
.# end of outer loop
.                                               # print number in top of %6
TNL %5          |v|             .               mov %1, %6
mov %0, 'n'     .               .               TNL %1          |v|
mov %0, 'o'     .               .               mov %0, '0'     mov %6, -1
mov %0, 't'     .               .               RET             .
mov %0, ' '     .               .               |>|             |v|
|v|             |<|             .               .               rem %6, %1, 10
mov %0, 'p'     .               .               .               div %1, %1, 10
mov %0, 'r'     .               .               |^|             TNR %1        
mov %0, 'i'     .               .               |>|             |v|    
mov %0, 'm'     .               .               mov %0, %4      mov %1, %6
mov %0, 'e'     .               .               add %4, %1, 48  gt  %4, %1, -1
mov %0, 10      .               .               |^|             TNR %4        
STP             .               .               .               RET